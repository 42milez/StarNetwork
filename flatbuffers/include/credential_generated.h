// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREDENTIAL_FLATBUFFERS_CREDENTIAL_H_
#define FLATBUFFERS_GENERATED_CREDENTIAL_FLATBUFFERS_CREDENTIAL_H_

#include "flatbuffers/flatbuffers.h"

namespace flatbuffers {
namespace credential {

struct Credential;

struct Credential FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct CredentialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Credential::VT_ID, id);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(Credential::VT_PASSWORD, password);
  }
  explicit CredentialBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CredentialBuilder &operator=(const CredentialBuilder &);
  flatbuffers::Offset<Credential> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Credential>(end);
    return o;
  }
};

inline flatbuffers::Offset<Credential> CreateCredential(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  CredentialBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Credential> CreateCredentialDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *password = nullptr) {
  return flatbuffers::credential::CreateCredential(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      password ? _fbb.CreateString(password) : 0);
}

inline const flatbuffers::credential::Credential *GetCredential(const void *buf) {
  return flatbuffers::GetRoot<flatbuffers::credential::Credential>(buf);
}

inline bool VerifyCredentialBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::credential::Credential>(nullptr);
}

inline void FinishCredentialBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flatbuffers::credential::Credential> root) {
  fbb.Finish(root);
}

}  // namespace credential
}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_CREDENTIAL_FLATBUFFERS_CREDENTIAL_H_
